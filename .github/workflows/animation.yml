name: generate animation
on:
  schedule:
    - cron: "0 */24 * * *"
  workflow_dispatch:
  push:
    branches:
      - "main"
env:
  MY_REPO: https://github.com/davidgao7/davidgao7.git
  MY_BRANCH: output
  MASTER_REPO: https://github.com/davidgao7/davidgao7.git
  MASTER_BRANCH: main
jobs:
  generate:
    permissions:
      contents: write # Needed for git push
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch all history for proper merge
      # This step ensures the 'output' branch exists.
      # It's good practice if the target branch might not exist initially.
      - name: Ensure output branch exists
        run: |
          git fetch origin ${{env.MY_BRANCH}}:${{env.MY_BRANCH}} || true # `|| true` to prevent failure if branch doesn't exist yet
          git checkout ${{env.MY_BRANCH}} || git checkout -b ${{env.MY_BRANCH}}
          git checkout ${{env.MASTER_BRANCH}} # Switch back to main for subsequent steps
        env:
          MY_BRANCH: output
          MASTER_BRANCH: main
      - name: Generate GitHub Contribution Grid Snake SVG
        uses: Platane/snk/svg-only@v3
        with:
          github_user_name: ${{ github.repository_owner }}
          outputs: |
            dist/github-contribution-grid-snake.svg
            dist/github-contribution-grid-snake-dark.svg?palette=github-dark
      - name: Push github-contribution-grid-snake.svg to the output branch
        uses: crazy-max/ghaction-github-pages@v3.1.0
        with:
          target_branch: output
          build_dir: dist
          domain: github.com
          keep_history: false
          allow_empty_commit: true
          absolute_build_dir: false
          follow_symlinks: false
          jekyll: true
          dry_run: false
          verbose: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # --- This is the Clean up step to resolve the "untracked files" error ---
      - name: Clean up generated dist directory
        run: rm -rf dist/
        # This removes the local copy of the generated SVGs after they've been pushed to 'output'.
        # It prevents the "untracked files would be overwritten" error when switching/pulling.
      - name: Merge output branch to main
        run: |
          # Configure Git user for the commit
          git config --global user.email "gao.ten@northeastern.edu"
          git config --global user.name "David Gao"

          # Fetch the latest state of all remote branches, crucial after ghaction-github-pages push
          git fetch origin

          # Checkout main branch to perform merge
          # This should now work without the 'dist/' conflict
          git checkout ${{env.MASTER_BRANCH}}

          # Pull latest changes from origin/main (your manual updates)
          git pull origin ${{env.MASTER_BRANCH}} --rebase=false || true

          # Merge the 'output' branch (which now has the new SVGs from the previous step) into 'main'
          # This brings the generated SVG files into main
          # -X theirs prefers the 'output' branch's version for conflicts over SVGs
          git merge --allow-unrelated-histories --no-ff -X theirs origin/${{env.MY_BRANCH}} -m "Merge generated SVG from output branch (workflow ${{ github.run_id }})"

          # Check if there are any changes to push (from the merge)
          if git diff --exit-code origin/${{env.MASTER_BRANCH}}; then
            echo "No new changes from merge. Skipping push."
          else
            git push origin ${{env.MASTER_BRANCH}}
            echo "Merged output branch into main and pushed combined changes."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MY_BRANCH: output
          MASTER_BRANCH: main
